// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/pods/resource-quota": {
            "get": {
                "description": "Get all pod resource quota information from TimescaleDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all pod resource quota",
                "parameters": [
                    {
                        "type": "string",
                        "description": "start time",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end time",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pod.Pod"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/pods/{namespace}/{name}": {
            "get": {
                "description": "Get all resource usage history and optimization usage value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get usage history and optimization usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of pod",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the namespace of pod",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "start time",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end time",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pod.Pod"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/pods/{namespace}/{name}/forecast": {
            "get": {
                "description": "Get forecast result from TimescaleDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get pod forecast result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of pod",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the namespace of pod",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/pods/{namespace}/{name}/resource-quota": {
            "get": {
                "description": "Get pod resource quota information from TimescaleDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get pod resource quota",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of pod",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the namespace of pod",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "start time",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end time",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pod.Pod"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/pods/{uuid}/forecast/result": {
            "get": {
                "description": "Get forecast result",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get vm forecast result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the uuid of forecast task",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/pods/{uuid}/forecast/status": {
            "get": {
                "description": "Get forecast task status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get pod forecast task status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the uuid of forecast task",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/vms/resource-quota": {
            "get": {
                "description": "Get all vm resource quota information from TimescaleDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all vm resource quota",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vm.Vm"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/vms/{name}": {
            "get": {
                "description": "Get all resource usage history and optimization usage value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get vm usage history and optimization usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the vm",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "start time",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end time",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/vms/{name}/forecast": {
            "get": {
                "description": "Get forecast result from TimescaleDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get vm forecast result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of vm",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/vms/{name}/forecast/status": {
            "get": {
                "description": "Get forecast task from TimescaleDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get vm forecast task status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of vm",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/vms/{name}/resource-quota": {
            "get": {
                "description": "Get vm resource quota information from TimescaleDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get vm resource quota",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the name of vm",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/v1/vms/{uuid}/forecast/status": {
            "get": {
                "description": "Get forecast task status by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get vm forecast task status by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the uuid of forecast task",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "pod.Container": {
            "type": "object",
            "properties": {
                "container_name": {
                    "type": "string"
                },
                "current_usages": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "optimized_usages": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "pod_name": {
                    "type": "string"
                },
                "requests": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "usages": {
                    "description": "Resource usage list",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/resource.ResourceUsageInfo"
                    }
                }
            }
        },
        "pod.Pod": {
            "type": "object",
            "properties": {
                "containers": {
                    "description": "Container information",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pod.Container"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "resource.ResourceUsageInfo": {
            "type": "object",
            "properties": {
                "current_usage": {
                    "type": "number"
                },
                "limit": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "optimized_usage": {
                    "type": "number"
                },
                "usage": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resource.TimeSeriesDatapoint"
                    }
                }
            }
        },
        "resource.TimeSeriesDatapoint": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "vm.Vm": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "usages": {
                    "description": "Resource usage list",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/resource.ResourceUsageInfo"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
