# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rightsizing_pb2 as rightsizing__pb2


class RightsizingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Rightsizing = channel.unary_unary(
                '/rightsizing.Rightsizing/Rightsizing',
                request_serializer=rightsizing__pb2.RightsizingRequest.SerializeToString,
                response_deserializer=rightsizing__pb2.RightsizingResponse.FromString,
                )


class RightsizingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Rightsizing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RightsizingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Rightsizing': grpc.unary_unary_rpc_method_handler(
                    servicer.Rightsizing,
                    request_deserializer=rightsizing__pb2.RightsizingRequest.FromString,
                    response_serializer=rightsizing__pb2.RightsizingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rightsizing.Rightsizing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rightsizing(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Rightsizing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rightsizing.Rightsizing/Rightsizing',
            rightsizing__pb2.RightsizingRequest.SerializeToString,
            rightsizing__pb2.RightsizingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ForecastStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Forecast = channel.unary_unary(
                '/rightsizing.Forecast/Forecast',
                request_serializer=rightsizing__pb2.ForecastRequest.SerializeToString,
                response_deserializer=rightsizing__pb2.ForecastResponse.FromString,
                )


class ForecastServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Forecast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ForecastServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Forecast': grpc.unary_unary_rpc_method_handler(
                    servicer.Forecast,
                    request_deserializer=rightsizing__pb2.ForecastRequest.FromString,
                    response_serializer=rightsizing__pb2.ForecastResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rightsizing.Forecast', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Forecast(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Forecast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rightsizing.Forecast/Forecast',
            rightsizing__pb2.ForecastRequest.SerializeToString,
            rightsizing__pb2.ForecastResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
